#!/usr/bin/env python
##
#This file is part of MegBot.
#
#   MegBot is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MegBot is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MegBot.  If not, see <http://www.gnu.org/licenses/>.
##

import socket
import sys
import os
from thread import start_new_thread
from time import sleep
from imp import load_source
from glob import glob

class Bot(object):
    def __init__(self, name, hooker, handler, plugins, config, run=True):
        """Initalises bot"""
        self.name = name
        self.config = config
        self.settings = config.networks[name]
        self.running = False
        self.channels = {}
        self.core = plugins
        self.hooker = hooker
        self.eventhandler = handler
        self.core["Coreconnect"].main(self)

        # Some of the directories in config.py won't be created in git,
        # so let's try and create them.
        # We'll assume a user who has set custom directory tree has
        # created them :P
        for path in self.config.paths.values():
            try:
                os.mkdir(path, 0775)
            except:
                # this will cause a lot of errors in the future
                # if these don't exist we ought to bail out.
                pass

        if run:
            self.plugins = {}
            if "Corelloader" in self.core.keys() and run:
                self.libraries = self.core["Corelloader"].main(self)
            self.server = self.libraries["IRCObjects"].L_Server(self)
            self.server.__setuphooks__(self)
            self.core["Corepluginloader"].main(self)
            self.run()


    def run(self):
        """This will run the bot.

        It loops (indefinitly) asking the parser for messages from the IRC
        It'll then split them up indevidually by \r\n (end of an IRC message)
        Once it has each message it'll pass it along to the delegator which
        will validate and then deluege if needed to the correct
        part of the bot
        """

        while True:
            while not self.running:
                sleep(.1)
            while self.running:
                try:
                    data = self.core["Coreparser"].main(self, [])
                except:
                    self.running = False
                for line in data.split("\r\n"):
                    self.core["Coredelegator"].main(self, line)
            try:
                self.sock.close()
            except:
                pass
            self.__init__(self.name,
                    self.hooker,
                    self.core,
                    self.config,
                    False)

if __name__ == "__main__":
    try:
        global_config = load_source("config", "config.py")
    except IOError:
        print "Could not find \"config.py\", maybe you forgot to copy and edit the example config?"
        sys.exit()
    coreplugins = {}
    for c in glob("Core/*.py"):
        # Thanks to webpigeon (https://github.com/xray7224/MegBot/issues/3)
        name = "Core%s" % os.path.splitext(os.path.basename(c))[0]
        coreplugins[name] = load_source(name, c)
    bots = {}
    for network in global_config.networks.keys():
        if not "active" in global_config.networks[network].keys() or (
                global_config.networks[network]["active"]):
            bots[network] = start_new_thread(
                                            Bot,
                                            (network,
                                            coreplugins["Corehooker"].Hooker(),
                                            coreplugins["Corehandler"].Handler(),
                                            coreplugins,
                                            global_config))
    try:
        while True:
            sleep(2)
    except KeyboardInterrupt:
        print "\nCtrl-C been hit, run for your lives!"
        sys.exit()
